{"version":3,"sources":["SeasonDisplay.js","index.js"],"names":["seasonConfig","summer","text","iconName","winter","SeasonDisplay","props","lat","month","season","Date","getMonth","_seasonConfig$season","react_default","a","createElement","className","concat","Seasons","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","errorMessage","_this2","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","message","console","log","src_SeasonDisplay_0","React","Component","ReactDOM","render","src_Seasons","document","querySelector"],"mappings":"4LAIMA,SAAe,CACjBC,OAAW,CACPC,KAAS,4BACTC,SAAa,OAEjBC,OAAW,CACPF,KAAS,0BACTC,SAAa,eA0BNE,EAZO,SAAAC,GAElB,IAZwBC,EAAKC,EAYvBC,GAZkBF,EAYCD,EAAMC,KAZFC,GAYO,IAAIE,MAAOC,YATrC,GAAKH,EAAO,EACXD,EAAI,EAAI,SAAW,SAEnBA,EAAI,EAAI,SAAW,UAIHK,EAGFZ,EAAaS,GAA/BP,EAHoBU,EAGpBV,KAAMC,EAHcS,EAGdT,SACjB,OAAQU,EAAAC,EAAAC,cAAA,OAAKC,UAAS,kBAAAC,OAAoBR,IACtCI,EAAAC,EAAAC,cAAA,KAAGC,UAAS,gBAAAC,OAAkBd,EAAlB,gBACZU,EAAAC,EAAAC,cAAA,UAAKb,GACLW,EAAAC,EAAAC,cAAA,KAAGC,UAAS,gBAAAC,OAAkBd,EAAlB,mBC5BVe,cACF,SAAAA,EAAYZ,GAAM,IAAAa,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACdC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMhB,KACDoB,MAAQ,CAAEnB,IAAI,KAAMoB,aAAc,IAFzBR,mFAKC,IAAAS,EAAAN,KACfO,OAAOC,UAAUC,YAAYC,mBACzB,SAACC,GAAeL,EAAKM,SAAS,CAAC3B,IAAI0B,EAASE,OAAOC,YACnD,SAACC,GAAUT,EAAKM,SAAS,CAACP,aAAaU,EAAIC,6CAK/C,OAAGhB,KAAKI,MAAMnB,MAAQe,KAAKI,MAAMC,cAC7BY,QAAQC,IAAR,YAAAvB,OAAwBK,KAAKI,MAAMnB,MAC5BM,EAAAC,EAAAC,cAAC0B,EAAD,CAAelC,IAAOe,KAAKI,MAAMnB,QAExCe,KAAKI,MAAMnB,KAAOe,KAAKI,MAAMC,aACtBd,EAAAC,EAAAC,cAAA,mBAAWO,KAAKI,MAAMC,cAE7BL,KAAKI,MAAMnB,KAAQe,KAAKI,MAAMC,kBAAlC,EACWd,EAAAC,EAAAC,cAAA,8BAtBG2B,IAAMC,WA0B5BC,IAASC,OACLhC,EAAAC,EAAAC,cAAC+B,EAAD,MAAaC,SAASC,cAAc","file":"static/js/main.252dceba.chunk.js","sourcesContent":["import React from 'react';\r\n// import ReactDOM from 'react-dom';\r\nimport './SeasonDisplay.css';\r\n\r\nconst seasonConfig = {\r\n    'summer' : {\r\n        'text' : \"Summer time = Mango time!\",\r\n        'iconName' : \"sun\"\r\n    },\r\n    'winter' : {\r\n        'text' : \"Winter time = bed time!\",\r\n        'iconName' : 'snowflake'\r\n    }\r\n}\r\n\r\nconst getSeason = function (lat, month) {\r\n    // northern hemisphere have positive latitude, southern has negative latitude.\r\n    // for months between april and september, it's summer for northern hemisphere\r\n    if(month >2 && month <9){\r\n        return lat>0 ? \"summer\" : \"winter\";\r\n    }else{\r\n        return lat>0 ? \"winter\" : \"summer\";\r\n    }\r\n}\r\n\r\nconst SeasonDisplay = props => {\r\n\r\n    const season = getSeason(props.lat, new Date().getMonth()); //new Date().getMonth() returns the value of index of the month starting form 0\r\n    const {text, iconName} = seasonConfig[season];\r\nreturn (<div className={`season-display ${season}`}>\r\n    <i className={`icon massive ${iconName} icon-left`}></i>\r\n    <h1>{text}</h1>\r\n    <i className={`icon massive ${iconName} icon-right`}></i>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default SeasonDisplay;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport SeasonDisplay from \"./SeasonDisplay\";\r\n\r\nclass Seasons extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = { lat:null, errorMessage: '' };\r\n    }\r\n\r\n    componentDidMount(){\r\n        window.navigator.geolocation.getCurrentPosition(\r\n            (position) => { this.setState({lat:position.coords.latitude}) },\r\n            (err) => { this.setState({errorMessage:err.message}) }\r\n        );\r\n    }\r\n\r\n    render(){\r\n        if(this.state.lat && !this.state.errorMessage){\r\n            console.log(`latitude:${this.state.lat}`);\r\n            return <SeasonDisplay lat = {this.state.lat}/>;\r\n        }\r\n        if(!this.state.lat && this.state.errorMessage){\r\n            return <div>err: {this.state.errorMessage}</div>;\r\n        } \r\n        if(!this.state.lat && !this.state.errorMessage){\r\n            return <div>loading!</div>;\r\n        }\r\n    }\r\n}\r\nReactDOM.render(\r\n    <Seasons />, document.querySelector('#root')\r\n)"],"sourceRoot":""}